{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DF-Orgchart"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Df_Clean_Misumi')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Assessment-2"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Ds_MisumiSqlRawData",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Ds_Misumi_CleanData",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          departmentCode as string,",
						"          categoryCode as string,",
						"          categoryName as string,",
						"          searchCategoryCode as string,",
						"          seriesCode as string,",
						"          seriesName as string,",
						"          brandCode as string,",
						"          brandUrlCode as string,",
						"          brandName as string,",
						"          seriesStatus as string,",
						"          catchCopy as string,",
						"          minStandardDaysToShip as string,",
						"          maxStandardDaysToShip as string,",
						"          directCartType as string,",
						"          priceCheckLessFlag as string,",
						"          minStandardUnitPrice as double,",
						"          maxStandardUnitPrice as double,",
						"          minPricePerPiece as double,",
						"          maxPricePerPiece as double,",
						"          recommendFlag as string,",
						"          volumeDiscountFlag as string,",
						"          cValueFlag as string,",
						"          stockItemFlag as string,",
						"          displayStandardPriceFlag as string,",
						"          discontinuedProductFlag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 aggregate(groupBy(seriesCode),",
						"     each(match(name!='seriesCode'), $$ = first($$))) ~> aggregate1",
						"aggregate1 derive(minStandardUnitPrice = iifNull(minStandardUnitPrice, 0, minStandardUnitPrice),",
						"          maxStandardUnitPrice = iifNull(maxStandardUnitPrice, 0, maxStandardUnitPrice),",
						"          minPricePerPiece = iifNull(minPricePerPiece, 0, minPricePerPiece),",
						"          maxPricePerPiece = iifNull(maxPricePerPiece, 0, maxPricePerPiece)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          seriesCode,",
						"          departmentCode,",
						"          categoryCode,",
						"          categoryName,",
						"          seriesName,",
						"          brandCode,",
						"          brandUrlCode,",
						"          brandName,",
						"          seriesStatus,",
						"          catchCopy,",
						"          minStandardDaysToShip,",
						"          maxStandardDaysToShip,",
						"          directCartType,",
						"          priceCheckLessFlag,",
						"          minStandardUnitPrice,",
						"          maxStandardUnitPrice,",
						"          minPricePerPiece,",
						"          maxPricePerPiece,",
						"          recommendFlag,",
						"          volumeDiscountFlag,",
						"          cValueFlag,",
						"          stockItemFlag,",
						"          displayStandardPriceFlag,",
						"          discontinuedProductFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Df_Dim_Brand')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Assessment-2"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Ds_Misumi_CleanData",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Ds_Misumi_Dim_Brand",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          seriesCode as string,",
						"          departmentCode as string,",
						"          categoryCode as string,",
						"          categoryName as string,",
						"          seriesName as string,",
						"          brandCode as string,",
						"          brandUrlCode as string,",
						"          brandName as string,",
						"          seriesStatus as string,",
						"          catchCopy as string,",
						"          minStandardDaysToShip as string,",
						"          maxStandardDaysToShip as string,",
						"          directCartType as string,",
						"          priceCheckLessFlag as string,",
						"          minStandardUnitPrice as double,",
						"          maxStandardUnitPrice as double,",
						"          minPricePerPiece as string,",
						"          maxPricePerPiece as string,",
						"          recommendFlag as string,",
						"          volumeDiscountFlag as string,",
						"          cValueFlag as string,",
						"          stockItemFlag as string,",
						"          displayStandardPriceFlag as string,",
						"          discontinuedProductFlag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 select(mapColumn(",
						"          brandCode,",
						"          brandUrlCode,",
						"          brandName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(brandCode,",
						"          brandUrlCode,",
						"          brandName),",
						"     Count = count()) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          brandCode,",
						"          brandUrlCode,",
						"          brandName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Df_Dim_Cat')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Assessment-2"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Ds_Misumi_CleanData",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Ds_Misumi_Dim_Cat",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select2"
						},
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          seriesCode as string,",
						"          departmentCode as string,",
						"          categoryCode as string,",
						"          categoryName as string,",
						"          seriesName as string,",
						"          brandCode as string,",
						"          brandUrlCode as string,",
						"          brandName as string,",
						"          seriesStatus as string,",
						"          catchCopy as string,",
						"          minStandardDaysToShip as string,",
						"          maxStandardDaysToShip as string,",
						"          directCartType as string,",
						"          priceCheckLessFlag as string,",
						"          minStandardUnitPrice as double,",
						"          maxStandardUnitPrice as double,",
						"          minPricePerPiece as string,",
						"          maxPricePerPiece as string,",
						"          recommendFlag as string,",
						"          volumeDiscountFlag as string,",
						"          cValueFlag as string,",
						"          stockItemFlag as string,",
						"          displayStandardPriceFlag as string,",
						"          discontinuedProductFlag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 select(mapColumn(",
						"          categoryCode,",
						"          categoryName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(categoryCode,",
						"          categoryName),",
						"     count = count()) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          categoryCode,",
						"          categoryName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 window(asc(categoryCode, true),",
						"     Id = rowNumber()) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Df_Dim_Dept')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Assessment-2"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Ds_Misumi_CleanData",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Ds_Misumi_Dim_Department",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "window1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          seriesCode as string,",
						"          departmentCode as string,",
						"          categoryCode as string,",
						"          categoryName as string,",
						"          searchCategoryCode as string,",
						"          seriesName as string,",
						"          brandCode as string,",
						"          brandUrlCode as string,",
						"          brandName as string,",
						"          seriesStatus as string,",
						"          catchCopy as string,",
						"          minStandardDaysToShip as string,",
						"          maxStandardDaysToShip as string,",
						"          directCartType as string,",
						"          priceCheckLessFlag as string,",
						"          minStandardUnitPrice as double,",
						"          maxStandardUnitPrice as double,",
						"          minPricePerPiece as string,",
						"          maxPricePerPiece as string,",
						"          recommendFlag as string,",
						"          volumeDiscountFlag as string,",
						"          cValueFlag as string,",
						"          stockItemFlag as string,",
						"          displayStandardPriceFlag as string,",
						"          discontinuedProductFlag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 select(mapColumn(",
						"          departmentCode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"aggregate1 window(asc(departmentCode, true),",
						"     Id = rowNumber()) ~> window1",
						"select1 aggregate(groupBy(departmentCode),",
						"     count = count()) ~> aggregate1",
						"window1 select(mapColumn(",
						"          departmentCode,",
						"          Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Df_Fact')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Assessment-2"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Ds_Misumi_CleanData",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Ds_Fact_Mismui",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          seriesCode as string,",
						"          departmentCode as string,",
						"          categoryCode as string,",
						"          categoryName as string,",
						"          seriesName as string,",
						"          brandCode as string,",
						"          brandUrlCode as string,",
						"          brandName as string,",
						"          seriesStatus as string,",
						"          catchCopy as string,",
						"          minStandardDaysToShip as string,",
						"          maxStandardDaysToShip as string,",
						"          directCartType as string,",
						"          priceCheckLessFlag as string,",
						"          minStandardUnitPrice as double,",
						"          maxStandardUnitPrice as double,",
						"          minPricePerPiece as string,",
						"          maxPricePerPiece as string,",
						"          recommendFlag as string,",
						"          volumeDiscountFlag as string,",
						"          cValueFlag as string,",
						"          stockItemFlag as string,",
						"          displayStandardPriceFlag as string,",
						"          discontinuedProductFlag as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 select(mapColumn(",
						"          seriesCode,",
						"          departmentCode,",
						"          categoryCode,",
						"          categoryName,",
						"          seriesName,",
						"          brandCode,",
						"          brandName,",
						"          seriesStatus,",
						"          catchCopy,",
						"          minStandardDaysToShip,",
						"          maxStandardDaysToShip,",
						"          minStandardUnitPrice,",
						"          maxStandardUnitPrice,",
						"          minPricePerPiece,",
						"          maxPricePerPiece",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pl_CleanData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Clean Admin Data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Df_Clean_Admin",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SqlAdmin": {},
									"Cleandata": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Clean Employee Data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Df_Clean_Employee",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SqlEmployee": {},
									"CleanData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Assessment-1/Preparation"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pl_CleanData_Misumi')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Df_Clean_Misumi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Assessment-2/Preparation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Df_Clean_Misumi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pl_Dim_Brand')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Pl_Dim_brand",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Df_Dim_Brand",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Assessment-2/Preparation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Df_Dim_Brand')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pl_Dim_Cat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Df_Dim_Cat",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Assessment-2/Preparation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Df_Dim_Cat')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pl_Dim_Dept')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Df_Dim_Dept",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Assessment-2/Preparation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Df_Dim_Dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pl_Fact')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Df_Fact",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Assessment-2/Preparation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Df_Fact')]"
			]
		}
	]
}